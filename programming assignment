# Function to demonstrate the use of lexical scoping: 
##    child functions can change the values of their parents variables using '<<-'

## The makeCacheMatrix function creates an object that contains a list of methods to set/get two 
## variable objects: a matrix 'x' and its cached inverse 'm', and the variables themselves.
##
## The two variables are part of the object environment and can only be set/retrieved using 
## the object functions in the methods list
##
makeCacheMatrix <- function(x = matrix()) {
    # initialize input variables
    m <- NULL
    
    # creates method to reset cached variables
    set <- function(y) {
        x <<- y
        m <<- NULL
    }
    
    # creates method to retrieve the value of the input matrix
    get <- function() x
    
    # created method to set the value of cached inversed matrix
    setinverse <- function(inverse) m <<- inverse
    
    #create method to retrieve the cached inversed matrix
    getinverse <- function() m
    
    #create the resulting object containing all the methods
    list(set = set, get = get,
         setinverse = setinverse,
         getinverse = getinverse)
}

## The cacheSolve function return a matrix that is the inverse of 'x'. 
## 
## The argument for the function is an object of type makeCacheMatrix(), and the inversed
## matrix will be retrieved from the cache if it is already calculated. 
## In the case it is a new input matrix, the inversed matrix will be calculated again 
## and the result will be cached.
##
cacheSolve <- function(x, ...) {
    # try to get a cached inversed matrix
    m <- x$getinverse()
    
    # if cached matrix exists, issue a message, returns it, and ends execution
    if(!is.null(m)) {
        message("getting cached data")
        return(m)
    }
    
    # if cached matrix does not exists
    # retrieves the new input matrix
    data <- x$get()
    
    #calculates its inverse
    m <- solve(data, ...)
    
    #cache the result
    x$setinverse(m)
    
    #returns the new result
    m
}
